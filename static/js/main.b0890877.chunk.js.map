{"version":3,"sources":["redux/contact/contact-actions.js","redux/contact/contact-operations.js","redux/contact/contact-selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filters/Filters.js","App.js","redux/contact/contact-reducer.js","redux/store.js","index.js"],"names":["addContactsRequest","createAction","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","name","number","dispatch","a","contacts","post","data","message","contactsId","delete","then","catch","error","getContacts","state","items","getFilter","filter","getvisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","includes","ContactItem","id","onRemove","className","type","onClick","connect","contactsSelectors","onRemoveContact","contactOperations","map","ContactForm","handleSubmitForm","e","preventDefault","props","onSubmit","some","alert","setState","handleChange","currentTarget","value","this","pattern","title","required","onChange","placeholder","Component","target","App","createReducer","payload","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReduser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0890877.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\nexport const addContactsError = createAction('contacts/addContactsError');\n\nexport const deleteContactsRequest = createAction(\"contacts/deleteContactsRequest\");\nexport const deleteContactsSuccess = createAction(\"contacts/deleteContactsSuccess\");\nexport const deleteContactsError = createAction(\"contacts/deleteContactsError\");\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\n\n\n\n\n","import axios from 'axios';\nimport {\n  addContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  deleteContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n} from \"./contact-actions\";\n\naxios.defaults.baseURL = \"http://localhost:4000\";\n\nconst addContacts = (name, number) => async dispatch => {\n  const contacts = { name, number };\n\n  dispatch(addContactsRequest());\n\n    try {\n        const { data } = await axios.post(\"/contacts\", contacts);\n        dispatch(addContactsSuccess(data));\n    } catch (error) {\n       dispatch(addContactsError(error.message)); \n    }\n    \n//   axios\n//     .post(\"/contacts\", contacts)\n//     .then(({ data }) => dispatch(addContactsSuccess(data)))\n//     .catch((error) => dispatch(addContactsError(error.message)));\n};\n\nconst deleteContact = contactsId => dispatch => {\n    dispatch(deleteContactsRequest());\n\n    axios\n      .delete(`/contacts/${contactsId}`)\n      .then(() => dispatch(deleteContactsSuccess(contactsId)))\n      .catch((error) => deleteContactsError(error));\n}\n\nexport default {\n  addContacts,\n  deleteContact,\n}; ","import { createSelector } from '@reduxjs/toolkit';\nconst getContacts = state => state.contacts.items;\n \nconst getFilter = state => state.contacts.filter;\n\nconst getvisibleContacts = createSelector(\n    [ getContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter((contact) =>\n           contact.name.toLowerCase().includes(normalizedFilter)\n        );\n    },\n)\nexport default {\n  getContacts,\n  getFilter,\n  getvisibleContacts,\n};","import './ContactList.scss';\nimport { connect } from 'react-redux';\nimport { contactOperations, contactsSelectors } from \"../../redux/contact\";\n\nconst ContactItem = ({ id, name, number , onRemove }) => {\n    return (\n        <li className=\"Contact-List\" key={id}> \n            {name}: {number} <button className=\"Button-List\" type=\"submit\" onClick={() => onRemove(id)}>Delete</button>\n        </li>\n    )\n}\n\nconst ContactList = ({ contacts, onRemoveContact }) => {\n    return (\n        <ul>\n            {contacts.map(contact => (\n                <ContactItem\n                    key={contact.id}\n                    id={contact.id}\n                    name={contact.name}\n                    number={contact.number}\n                    onRemove={onRemoveContact}\n                />\n            ))}\n        </ul>\n\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    contacts: contactsSelectors.getvisibleContacts(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRemoveContact: (id) => dispatch(contactOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import  { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './ContactForm.scss';\nimport { contactOperations, contactsSelectors } from \"../../redux/contact\";\n\nclass ContactForm extends Component {\n\n    state = {\n        name: '',\n        number: ''\n    };\n  \n    handleSubmitForm = e => {\n        e.preventDefault();\n        const { onSubmit, contacts } = this.props;\n        const { name, number } = this.state;\n\n        if (!name) {\n          return;\n        }\n        if (\n          contacts.some(\n            (contact) => contact.name.toLowerCase() === name.toLowerCase()\n          )\n        ) {\n          alert(`${name} is already in contacts`);\n          return;\n        }\n\n        onSubmit(name, number);\n        this.setState({ name: \"\", number: \"\" }); \n    };\n     \n    handleChange = e => {\n        const { name, value } = e.currentTarget;\n        this.setState({ [name]: value });\n    };\n \n    render() {\n        return (\n            \n            <form className=\"Form\" onSubmit={this.handleSubmitForm}>\n                <label className=\"Label\">\n                Name  <input className=\"Input\"\n                        id={this.state.id}\n                        type=\"text\"\n                        name=\"name\"\n                        value={this.state.name}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                        onChange={this.handleChange} \n                        placeholder=\"name\"  \n                    /> \n                </label>\n                <label>\n                Number  <input  className=\"Input\"\n                        type=\"tel\"\n                        name=\"number\"\n                        placeholder=\"number\"\n                        value={this.state.number}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        onChange={this.handleChange}\n                    />\n                </label>\n                <button className=\"Button\" type=\"submit\">Add contact</button> \n            </form>    \n        );\n    }\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (name, number) =>\n    dispatch(contactOperations.addContacts(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './Filters.scss';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux/contact';\n\nconst Filter = ({ filter, changeFilter }) => {\n  return (\n    <>\n        <h3> Find contacts by me </h3>\n      <input className=\"Input-Filter\"\n        type=\"text\"\n        name=''\n        value={filter}\n        onChange={changeFilter}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: (e) => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React from 'react';\nimport  { Component } from 'react';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filters';\n\nimport './App.scss';\n\nclass App extends Component {\n    state = {\n        contacts: [],\n        filter: '',\n    }\n    \n    handleSubmitForm = (contact) => {\n        this.setState(({contacts}) => ({\n            contacts: [...contacts, contact],\n        }));\n    }\n\n    render() {\n        return (\n            <div className='Phonebook'>\n                <h1 className='Phonebook-title'>Phonebook</h1>\n                  <ContactForm  />\n                <h2>Contacts</h2>\n               \n                <Filter />\n            \n                <ContactList  />\n            </div>\n        );\n    }\n}\n \nexport default App;\n\n\n\n\n","import { createReducer} from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport {\n  addContactsSuccess,\n  deleteContactsSuccess,\n  changeFilter,\n} from \"./contact-actions\";\n\nconst items = createReducer([], {\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSuccess]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('',{\n    [changeFilter]: (_, { payload }) => payload,\n}) \n\nexport default combineReducers({\n    items,\n    filter,\n}) \n\n\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport contactReduser from \"./contact/contact-reducer\";\nimport logger from \"redux-logger\";\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactReduser,\n  },\n  middleware,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      </Provider>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}